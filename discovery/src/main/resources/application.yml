server:
  port: 8761

eureka:
  # Configure standalone mode, see http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html#_standalone_mode
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
  instance:
    hostname: localhost
    leaseRenewalIntervalInSeconds: 5
  server:
    # Disable self-preservation during development, see https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication
    enableSelfPreservation: false

    # Set this only for this sample service without which starting the instance will by default wait for the default of 5 mins
    waitTimeInMsWhenSyncEmpty: 0

    # for the example, set this to zero as we will not have peers to sync up with.
    # Do not set in a real environment with multi-node eureka clusters.
    numberRegistrySyncRetries: 0

    response-cache-update-interval-ms: 1000

    # Used in dev/demo to let go of EMERGENCY! messages in the Eureka console
    renewalPercentThreshold: 0.49

  password: ${SECURITY_USER_PASSWORD:password}

logging:
  level:
    root: WARN

    # Set INFO to see the allocated port
    org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer: INFO
    org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer: INFO

---
spring:
  profiles: discovery1
server:
  port: 8761
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8762/eureka/
  instance:
    hostname: localhost
  server:
    enableSelfPreservation: true

---
spring:
  profiles: discovery2
server:
  port: 8762
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    hostname: localhost
  server:
    enableSelfPreservation: true
